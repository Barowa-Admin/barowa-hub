version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: barowa-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: barowa_hub
      POSTGRES_USER: barowa
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - barowa-network
    ports:
      - "127.0.0.1:5432:5432"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: barowa-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - barowa-network
    ports:
      - "127.0.0.1:6379:6379"

  # API Backend
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: barowa-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://barowa:${POSTGRES_PASSWORD}@postgres:5432/barowa_hub
      REDIS_URL: redis://redis:6379
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      API_PORT: 3001
    volumes:
      - ./logs:/app/logs
    networks:
      - barowa-network
    depends_on:
      - postgres
      - redis
    ports:
      - "127.0.0.1:3001:3001"

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: barowa-web-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://hub.barowa.com/api
    networks:
      - barowa-network
    depends_on:
      - api
    ports:
      - "127.0.0.1:3000:3000"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: barowa-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - barowa-network
    depends_on:
      - web
      - api

  # Backup Service (läuft 1x täglich)
  backup:
    image: postgres:15-alpine
    container_name: barowa-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    networks:
      - barowa-network
    depends_on:
      - postgres
    command: /scripts/backup.sh

volumes:
  postgres_data:
  redis_data:

networks:
  barowa-network:
    driver: bridge
